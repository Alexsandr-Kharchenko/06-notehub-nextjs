'use client';

import { useState } from 'react';
import SearchBox from '@/app/components/SearchBox/SearchBox';
import Pagination from '@/app/components/Pagination/Pagination';
import NoteList from '@/app/components/NoteList/NoteList';
import Modal from '@/app/components/Modal/Modal';
import NoteForm from '@/app/components/NoteForm/NoteForm';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { fetchNotes, deleteNote } from '@/app/lib/api';
import type { Note } from '@/app/types/note';
import noteDetailsStyles from './NoteDetails.module.css';
import notesPageStyles from './NotesPage.module.css';

export default function NotesPage() {
  const [search, setSearch] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const queryClient = useQueryClient();

  // üìÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫
  const {
    data: notes,
    isLoading,
    error,
  } = useQuery<Note[]>({
    queryKey: ['notes'],
    queryFn: fetchNotes,
  });

  // –ú—É—Ç–∞—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
  const mutation = useMutation({
    mutationFn: (id: string) => deleteNote(id),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['notes'] }),
  });

  // üîπ –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  const removeNote = mutation.mutate;

  // üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –º—É—Ç–∞—Ü—ñ—ó
  const isDeleting = mutation.isPending;

  if (isLoading) return <p>Loading‚Ä¶</p>;
  if (error) return <p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</p>;
  if (!notes || notes.length === 0) return <p>–ù–æ—Ç–∞—Ç–æ–∫ –Ω–µ–º–∞—î</p>;

  // üîé –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –ø–æ—à—É–∫—É
  const filteredNotes = notes.filter(note =>
    note.title.toLowerCase().includes(search.toLowerCase())
  );

  // üìÑ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è (–ø–æ 5 –Ω–æ—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É)
  const perPage = 5;
  const pageCount = Math.ceil(filteredNotes.length / perPage);
  const start = (currentPage - 1) * perPage;
  const paginatedNotes = filteredNotes.slice(start, start + perPage);

  return (
    <div className={noteDetailsStyles.container}>
      <h1 className={noteDetailsStyles.title}>Your Notes</h1>

      {/* üîé –ü–æ—à—É–∫ */}
      <SearchBox value={search} onChange={setSearch} />

      {/* üìù –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏ */}
      <button
        onClick={() => setIsModalOpen(true)}
        className={notesPageStyles.button}
      >
        + Add Note
      </button>

      {/* üìã –°–ø–∏—Å–æ–∫ –Ω–æ—Ç–∞—Ç–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è */}
      <NoteList
        notes={paginatedNotes}
        removeNote={removeNote}
        isPending={isDeleting}
      />

      {/* üìÑ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
      <Pagination
        pageCount={pageCount}
        currentPage={currentPage}
        onPageChange={setCurrentPage}
      />

      {/* ü™ü –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ —Ñ–æ—Ä–º–æ—é */}
      {isModalOpen && (
        <Modal onClose={() => setIsModalOpen(false)}>
          <NoteForm onCancel={() => setIsModalOpen(false)} />
        </Modal>
      )}
    </div>
  );
}
